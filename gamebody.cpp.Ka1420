#include "gamebody.h"
#include <QDebug>
#include <QPainter>
#include <QMouseEvent>
#include <QMessageBox>
#include <cmath>
#include <cstdlib>
#include <ctime>

GameBody :: GameBody(QWidget *parent):
    QWidget(parent)
{
    set_value(6,QDir::current());
    setMouseTracking(false);
}

GameBody :: ~GameBody(){
    delete gamesection;
}

void GameBody :: next_sec(){
    if (current_sec<max_sec_num-1){
        current_sec++;
        load_section(current_sec);
    }
}

void GameBody :: past_sec(){
    if (current_sec>0){
        current_sec--;
        load_section(current_sec);
    }
}

void GameBody :: restart_sec(){
    gamesection->init();
    last_active_unit = 0;
    show_cursor = false;
    update();
}

void GameBody :: autosolve_sec(){
    bool solved = gamesection->autosolve();
    if (solved){
        update();
        QMessageBox success_note(QMessageBox::Information,"FlowFree",QString("The section is successfully solved within %1 steps!").arg(gamesection->steps_of_auto_solve),QMessageBox::Yes|QMessageBox::Default);
        success_note.show();
        if (success_note.exec() == QMessageBox::Yes){

        }
    }
    else {
        QMessageBox failure_note(QMessageBox::Warning,"FlowFree",QString("The section cannot be solved within %1 steps!").arg(gamesection->steps_of_auto_solve),QMessageBox::Yes|QMessageBox::Default);
        failure_note.show();
        if (failure_note.exec() == QMessageBox::Yes){

        }
    }
}

/*File Format:
 * (Num of Size) (Num of ColorType)
 * (point 0 of color0)
 * (point 1 of color0)
 * ...
 * (point 0 of colorN)
 * (point 1 of colorN)
 */
void GameBody :: load_section(int sec = 0){
    Q_INIT_RESOURCE(flowfree_resources);
    emit currentSectionChanged(QString("SECTION %1").arg(sec+1));
    if (gamesection!=0)
        delete gamesection;
    QString filepath = QString(":/sections/sections/%1.txt").arg(sec);
    QFile f(filepath);
    if (!f.open(QIODevice::ReadOnly))
        qFatal("Cannot Open!");
    QTextStream in(&f);
    int sz=0; int ct=0;
    in>>sz>>ct;
    Unit **cps = new Unit*[sz];
    for (int i=0;i<ct;++i)
        cps[i]= new Unit[2];
    for (int i=0;i<ct;++i)
        for (int j=0;j<2;++j){
            in>>cps[i][j].x>>cps[i][j].y;
            cps[i][j].color = i;
            cps[i][j].if_fixed = true;
            cps[i][j].succ = 0;
        }
    gamesection = new GameSection(cps,sz,ct);
    for (int i=0;i<sz;++i)
        delete []cps[i];
    delete []cps;
    last_active_unit = 0;
    show_cursor = false;
    current_sec = sec;
    update();
}

void GameBody :: set_value(int max, QDir source){
    gamesection = 0;
    max_sec_num = max;
    current_sec = 0;
    sec_source = source;
    gamesection = 0;
    last_active_unit = 0;
    cursor = QPoint(0,0);
    show_cursor = false;
    random_size = 5;
    random_colortype = 3;
    load_section(current_sec);
}

void GameBody :: randomize(){
    if (random_size>0&&random_colortype>0&&random_size*random_size>=2*random_colortype)
    {
    gamesection->init();
    Unit **cps = new Unit*[random_colortype];
    for (int i=0;i<random_colortype;++i)
        cps[i]= new Unit[2];
    for (int i=0;i<random_colortype;++i)
        for (int j=0;j<2;++j){
            cps[i][j].x = 0;
            cps[i][j].y = 0;
            cps[i][j].color = i;
            cps[i][j].if_fixed = true;
            cps[i][j].succ = 0;
        }
    gamesection = new GameSection(cps,random_size,random_colortype);
    for (int i=0;i<random_size;++i)
        delete []cps[i];
    delete []cps;
    gamesection->playarea[0][0].if_fixed = false;
    gamesection->playarea[0][0].color = -1;
    srand(time(NULL));
    //do{
    for (int i=0;i<random_colortype;++i)
        for (int j=0;j<2;++j){
            int tempx = 0;
            int tempy = 0;
            do{
            tempx = rand()%random_size;
            tempy = rand()%random_size;
            }while(gamesection->playarea[tempx][tempy].if_fixed);
            gamesection->playarea[tempx][tempy].color = i;
            gamesection->playarea[tempx][tempy].if_fixed = true;
            gamesection->fixed_point_series[i][j] = &(gamesection->playarea[tempx][tempy]);
        }
    //}while(!gamesection->autosolve());
    gamesection->init();
    update();
    last_active_unit = 0;
    show_cursor = false;
    }
}

void GameBody :: paintEvent(QPaintEvent *ev){
    QPainter p(this);
    p.setRenderHint(QPainter::Antialiasing,true);
    p.setWindow(0,0,420,420);
    //Draw the grid
    p.setPen(QColor(Qt::darkYellow));
    for (int i=0;i<=420;i+=420/(gamesection->size)){
        p.drawLine(0,i,420,i);
        p.drawLine(i,0,i,420);
    }

    //Draw the fixed points
    int inteval = 420/(gamesection->size);
    for (int i=0;i<gamesection->colortype;++i)
        for (int j=0;j<2;++j){
            //Pattern1
            //p.setBrush(QColor(i*255/gamesection->colortype,i*255/gamesection->colortype,i*255/gamesection->colortype));
            //Pattern2
            //p.setBrush(QColor(QColor::colorNames()[i]));
            //Pattern3
            p.setPen(QColor::fromHsv(i*359/gamesection->colortype,255,255,0));
            p.setBrush(QColor::fromHsv(i*359/gamesection->colortype,255,255));
            p.drawEllipse(QPoint(inteval*(gamesection->fixed_point_series[i][j]->y)+inteval/2,inteval*(gamesection->fixed_point_series[i][j]->x)+inteval/2),inteval/3,inteval/3);
        }

    //Draw the tubes
    for (int i=0;i<gamesection->colortype;++i)
        for (int j=0;j<2;++j){
            Unit *startpoint = gamesection->fixed_point_series[i][j];
            while (startpoint->succ!=0){
                QPen pen(QColor::fromHsv(i*359/gamesection->colortype,255,255));
                pen.setWidth(inteval/5);
                pen.setCapStyle(Qt::RoundCap);
                pen.setJoinStyle(Qt::RoundJoin);
                p.setPen(pen);
                p.drawLine((startpoint->y)*inteval+inteval/2,(startpoint->x)*inteval+inteval/2,(startpoint->succ->y)*inteval+inteval/2,(startpoint->succ->x)*inteval+inteval/2);
                startpoint = startpoint->succ;
            }
        }

    //Draw the cursor
    if (show_cursor && last_active_unit!=0){
        QPainter p2(this);
        p2.setRenderHint(QPainter::Antialiasing,true);
        p2.setBrush(QColor::fromHsv((last_active_unit->color)*359/gamesection->colortype,255,255,160));
        p2.setPen(QColor::fromHsv((last_active_unit->color)*359/gamesection->colortype,255,255,0));
        p2.drawEllipse(cursor,(this->frameSize().height()/gamesection->size)/4,(this->frameSize().height()/gamesection->size)/4);
    }
}

void GameBody :: mouseMoveEvent(QMouseEvent *event){
    Q_INIT_RESOURCE(flowfree_resources);
    if ((last_active_unit!=0)&& event->buttons() == Qt::LeftButton){
        cursor = event->pos();
        if (last_active_unit!=0)
            show_cursor = true;
        else
            show_cursor = false;
        update();
        int inteval = (this->frameSize().height())/(gamesection->size);
        int cursor_j = (event->pos().x())/inteval;
        int cursor_i = (event->pos().y())/inteval;
        if (cursor_j>=gamesection->size)
            cursor_j = gamesection->size - 1;
        if (cursor_i>=gamesection->size)
            cursor_i = gamesection->size - 1;
        if ((abs(cursor_i-last_active_unit->x)+abs(cursor_j-last_active_unit->y))==1)
        {
        if (gamesection->playarea[cursor_i][cursor_j].color == -1){
            last_active_unit->succ = &(gamesection->playarea[cursor_i][cursor_j]);
            last_active_unit->succ->color = last_active_unit->color;
            last_active_unit = last_active_unit->succ;
            //update();
        }
        else if (gamesection->playarea[cursor_i][cursor_j].if_fixed){
            if (gamesection->playarea[cursor_i][cursor_j].color == last_active_unit->color){
                if (&(gamesection->playarea[cursor_i][cursor_j]) == last_active_unit){

                }
                else if (gamesection->playarea[cursor_i][cursor_j].succ == 0){
                    last_active_unit->succ = &(gamesection->playarea[cursor_i][cursor_j]);
                    qDebug()<<"Connected!";
                    QSound::play(":/sound/sound/connected.wav");
                    last_active_unit = 0;
                }
                else {
                    last_active_unit = &(gamesection->playarea[cursor_i][cursor_j]);
                    gamesection->playarea[cursor_i][cursor_j].clear_succ();
                }
            }
            else{

            }

        }
        else {
            if (&(gamesection->playarea[cursor_i][cursor_j]) == last_active_unit){

            }
            else{
                int tempcolor = gamesection->playarea[cursor_i][cursor_j].color;
                if (gamesection->if_color_connected(tempcolor)){
                    qDebug()<<"Broken!";
                    QSound::play(":/sound/sound/broken.wav");
                }
                Unit* p = gamesection->fixed_point_series[tempcolor][0];
                while (p->succ!=0 && p->succ!=&(gamesection->playarea[cursor_i][cursor_j]))
                    p = p->succ;
                if (p->succ!=&(gamesection->playarea[cursor_i][cursor_j])){
                    p = gamesection->fixed_point_series[tempcolor][1];
                    while (p->succ!=0 && p->succ!=&(gamesection->playarea[cursor_i][cursor_j]))
                        p = p->succ;
                }
                p->succ = 0;
                if (last_active_unit->color != tempcolor){
                    gamesection->playarea[cursor_i][cursor_j].clear_succ();
                    gamesection->playarea[cursor_i][cursor_j].color = last_active_unit->color;
                    last_active_unit->succ = &(gamesection->playarea[cursor_i][cursor_j]);
                    last_active_unit = last_active_unit->succ;
                }
                else{
                    gamesection->playarea[cursor_i][cursor_j].clear_succ();
                    p->succ = &(gamesection->playarea[cursor_i][cursor_j]);
                    p->succ->color = tempcolor;
                    last_active_unit = p->succ;
                }
            }
        }
        }
    }
    else{
        QWidget::mouseMoveEvent(event);
    }
}

void GameBody :: mousePressEvent(QMouseEvent *event){
    Q_INIT_RESOURCE(flowfree_resources);
    int inteval = (this->frameSize().height())/(gamesection->size);
    qDebug()<<this->frameSize();
    if (event->button() == Qt::LeftButton){
        cursor = event->pos();
        if (last_active_unit!=0)
            show_cursor = true;
        else
            show_cursor = false;
        update();
        int cursor_j = (event->pos().x())/inteval;
        int cursor_i = (event->pos().y())/inteval;
        if (cursor_j>=gamesection->size)
            cursor_j = gamesection->size - 1;
        if (cursor_i>=gamesection->size)
            cursor_i = gamesection->size - 1;
        if (gamesection->playarea[cursor_i][cursor_j].color == (-1)){
            last_active_unit = 0;
        }
        else{
            if (gamesection->if_color_connected(gamesection->playarea[cursor_i][cursor_j].color)){
                qDebug()<<"Broken!";
                QSound::play(":/sound/sound/broken.wav");
            }
            last_active_unit = &(gamesection->playarea[cursor_i][cursor_j]);
            if (last_active_unit->if_fixed){
                gamesection->fixed_point_series[last_active_unit->color][0]->clear_succ();
                gamesection->fixed_point_series[last_active_unit->color][1]->clear_succ();
            }
            else{
                int tempcolor = last_active_unit->color;
                last_active_unit->clear_succ();
                last_active_unit->color = tempcolor;
            }
        }
    }
    else{
        last_active_unit = 0;
    }

}

void GameBody :: mouseReleaseEvent(QMouseEvent *event){
    Q_INIT_RESOURCE(flowfree_resources);
    last_active_unit = 0;
    show_cursor =false;
    update();
    if (gamesection->if_all_color_connected()){
        qDebug()<<"PASS!";
        QSound::play(":/sound/sound/pass.wav");
        QMessageBox pass_note(QMessageBox::Information,"FlowFree","You have passed this section!",QMessageBox::Yes|QMessageBox::Default);
        pass_note.show();
        if (pass_note.exec() == QMessageBox::Yes){

        }
    }
}
